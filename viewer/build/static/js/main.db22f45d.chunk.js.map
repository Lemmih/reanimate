{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","connect","ws","WebSocket","onopen","event","setState","state","objectSpread","message","send","onclose","setTimeout","onmessage","data","console","log","nFrames_new","svgs_new","nFrames","svgs","start","Date","now","startsWith","substring","concat","div","document","createElement","innerHTML","push","socket","onLoad","ace","resize","self","assertThisInitialized","requestAnimationFrame","animate","thisFrame","Math","round","length","svg","firstChild","removeChild","appendChild","innerText","_this2","react_default","a","className","ref","node","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db22f45d.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass App extends Component {\n  connect = () => {\n    // const ws = new WebSocket(\"wss://reanimate.clozecards.com:9160\");\n    const ws = new WebSocket(\"ws://localhost:9161\");\n\n    ws.onopen = event => {\n      this.setState(state => ({\n        ...state,\n        message: \"Connected.\"\n      }));\n      ws.send('60');\n    }\n    ws.onclose = event => {\n      this.setState(state => ({\n        ...state,\n        message: \"Disconnected.\"\n      }));\n      setTimeout(this.connect, 1000);\n    }\n    ws.onmessage = event => {\n      if (event.data === \"Success!\") {\n        console.log(\"Success\");\n      } else if (event.data === \"Compiling\") {\n        this.setState({message: \"Compiling...\"});\n      } else if (event.data === \"Rendering\") {\n        this.setState({message: \"Rendering...\"});\n        this.nFrames_new = 0;\n        this.svgs_new = [];\n      } else if (event.data === \"Done\") {\n        this.setState({message: \"\"});\n        console.log(\"Done\");\n        this.nFrames = this.nFrames_new;\n        this.svgs = this.svgs_new;\n        this.nFrames_new = 0;\n        this.svgs_new = [];\n        this.start = Date.now();\n      } else if (event.data.startsWith(\"Error\")) {\n        console.log(\"Error\");\n        this.setState({message: event.data.substring(5)});\n      } else {\n        this.setState({message: `Rendering: ${this.nFrames_new}`});\n        this.nFrames_new++;\n        const div = document.createElement('div');\n        div.innerHTML = event.data;\n        this.svgs_new.push(div);\n      }\n    }\n    this.setState(state => ({\n      ...state,\n      socket: ws,\n      message: \"Connecting...\"\n    }));\n  }\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    };\n    setTimeout(this.connect, 0);\n    this.nFrames_new = 0;\n    this.svgs_new = [];\n    this.nFrames = 0;\n    this.svgs = [];\n    this.start = Date.now();\n    const self = this;\n    const animate = () => {\n      const now = Date.now();\n      const nFrames = self.nFrames;\n      const thisFrame = (Math.round((now - this.start) / 1000 * 60)) % nFrames\n      // const thisFrame = 0; console.log('Animation frame:', thisFrame, nFrames);\n      if (self.svgs_new.length) {\n        while (self.svg.firstChild)\n          self.svg.removeChild(self.svg.firstChild);\n        self.svg.appendChild(self.svgs_new[self.svgs_new.length-1]);\n      } else {\n        if (nFrames) {\n          // self.svg.innerHTML = self.svgs[thisFrame];\n          while (self.svg.firstChild)\n            self.svg.removeChild(self.svg.firstChild);\n          self.svg.appendChild(self.svgs[thisFrame]);\n        } else {\n          self.svg.innerText = \"\";\n        }\n      }\n      requestAnimationFrame(animate);\n    };\n    requestAnimationFrame(animate);\n  }\n  onLoad = ace => {\n    setTimeout(function() {\n      ace.resize();\n    }, 0);\n  }\n  render() {\n    const {message} = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"viewer\">\n          <div ref={node => this.svg = node}/>\n          <div className=\"messages\">\n            <pre>{message}</pre>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}